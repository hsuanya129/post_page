{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","itemList","addPost","bind","assertThisInitialized","removePost","title","content","picture","id","Date","now","newList","concat","setState","postLength","length","splice","_this2","react_default","a","createElement","className","react_router_dom","basename","process","public_url","react_router","exact","path","render","App_IndexPage","assign","App_NewPost","React","Component","IndexPage","_this3","toPostPage","toRemovePost","history","push","onClick","App_Posts","NewPost","_this4","submitPost","uploadPic","uploadClick","document","getElementById","click","newPic","files","previewImg","previewP","src","URL","createObjectURL","hidden","value","type","maxLength","defaultValue","accept","onChange","Posts","map","item","App_Post","key","Post","imgId","reader","FileReader","readAsDataURL","onload","e","img","target","result","Boolean","window","location","hostname","match","ReactDOM","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.71f6dc09.chunk.js","sourcesContent":["import React from 'react';\r\nimport './App.css';\r\nimport { BrowserRouter, Route, Link, history, Redirect } from 'react-router-dom';\r\n\r\n\r\n\r\n// parent, root component, where the truth data saves\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    //for saving data\r\n    this.state = {\r\n      itemList: [\r\n        // {\r\n        //   id:\"\"\r\n        //   title: \"\",\r\n        //   content: \"\",\r\n        //   picture:\"\"\r\n        // }\r\n      ]\r\n    }\r\n    //binding method with this\r\n    this.addPost = this.addPost.bind(this)\r\n    this.removePost = this.removePost.bind(this)\r\n  }\r\n\r\n  addPost(title, content, picture) {\r\n\r\n    let id;\r\n    id = Date.now()\r\n\r\n    const newList = this.state.itemList.concat({\r\n      id: id,\r\n      title: title,\r\n      content: content,\r\n      picture: picture\r\n    })\r\n\r\n    this.setState({\r\n      itemList: newList\r\n    })\r\n  }\r\n\r\n  removePost() {\r\n    const postLength = this.state.itemList.length\r\n    const newList = this.state.itemList.splice(0, postLength - 1)\r\n    this.setState({\r\n      itemList: newList\r\n    })\r\n  }\r\n\r\n  render() {\r\n  \r\n    return (\r\n      <div className=\"App\">\r\n        <BrowserRouter basename={process.env.public_url}>\r\n          <Route exact path=\"/\" render={(props) => <IndexPage {...props} removePost={this.removePost} itemList={this.state.itemList} />} />\r\n          <Route path=\"/add_post\" render={(props) => <NewPost {...props} addPost={this.addPost} />} />\r\n        </BrowserRouter>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n//for index page, child of App\r\nclass IndexPage extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.toPostPage = this.toPostPage.bind(this);\r\n    this.toRemovePost = this.toRemovePost.bind(this);\r\n  }\r\n\r\n  toPostPage() {\r\n    this.props.history.push('/add_post')\r\n  }\r\n\r\n  toRemovePost() {\r\n    this.props.removePost()\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <button onClick={this.toPostPage}>Add Post</button>\r\n        <button onClick={this.toRemovePost}>Remove Post</button>\r\n        <Posts itemList={this.props.itemList} />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n\r\n\r\n//for add_post page, child of App\r\nclass NewPost extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.submitPost = this.submitPost.bind(this);\r\n    this.uploadPic = this.uploadPic.bind(this)\r\n    this.uploadClick = this.uploadClick.bind(this)\r\n\r\n  }\r\n\r\n  uploadClick(){\r\n    const newPic = document.getElementById('pictureBox')\r\n    newPic.click()\r\n  }\r\n\r\n  uploadPic() {\r\n    //section below is for preview\r\n    const newPic = document.getElementById('pictureBox').files[0]\r\n    const previewImg = document.getElementById('previewImg')\r\n    const previewP = document.getElementById('previewP')\r\n    previewImg.src = URL.createObjectURL(newPic)\r\n    previewImg.hidden = false;\r\n    previewP.hidden = false;\r\n  }\r\n\r\n\r\n  submitPost() {\r\n\r\n    //save post && call parent function to truly save post's information\r\n    const title = document.getElementById('titleBox').value\r\n    const content = document.getElementById('contentBox').value\r\n    const picture = document.getElementById('pictureBox').files[0]\r\n\r\n    this.props.addPost(title, content, picture);\r\n    this.props.history.push('/')\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <p>Title:</p>\r\n        <input className='textBox' type=\"text\" id=\"titleBox\" maxLength={10} />\r\n        <p>Content:</p>\r\n        <textarea className='textareaBox' id=\"contentBox\" defaultValue=\"Please input Content.\" />\r\n        <br />\r\n        <p id='previewP' hidden={true}>Preview:</p>\r\n        <img id='previewImg' className='img' hidden={true} />\r\n        <br />\r\n        <input id='pictureBox' type=\"file\" accept=\"image/*\" onChange={this.uploadPic} hidden={true}/>\r\n        <button id='pictureBtn' onClick={this.uploadClick}>upload</button>\r\n        <button id=\"submitPost\" onClick={this.submitPost} >submit</button>\r\n        <br/>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n//for showing all posts, map and render every post component, child of index\r\nclass Posts extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  render() {\r\n    const itemList = this.props.itemList.map((item) => <Post key={item.id} id={item.id} title={item.title} content={item.content}\r\n      picture={item.picture} />)\r\n\r\n    return (\r\n      <div>\r\n        {itemList}\r\n      </div>\r\n    )\r\n  }\r\n\r\n}\r\n\r\n// for single post show, child of Posts\r\nclass Post extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  componentDidMount() {\r\n\r\n    if (this.props.picture) {\r\n      const imgId = this.props.id\r\n      const reader = new FileReader()\r\n      reader.readAsDataURL(this.props.picture)\r\n      reader.onload = function (e) {\r\n        const img = document.getElementById(imgId) \r\n        img.src= e.target.result\r\n        img.hidden=false\r\n      }\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className='post'>\r\n        <p>{this.props.title}</p>\r\n        <p>{this.props.content}</p>\r\n        <img id={this.props.id} className='img' hidden={true} />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}