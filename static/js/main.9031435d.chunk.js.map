{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","itemList","addPost","bind","assertThisInitialized","removePost","title","content","picture","id","Date","now","newList","concat","setState","postLength","length","splice","_this2","react_default","a","createElement","className","react_router_dom","react_router","exact","path","render","App_IndexPage","assign","App_NewPost","React","Component","IndexPage","_this3","toPostPage","toRemovePost","history","push","onClick","App_Posts","NewPost","_this4","submitPost","uploadPic","uploadClick","document","getElementById","click","newPic","files","previewImg","previewP","src","URL","createObjectURL","hidden","value","type","maxLength","defaultValue","accept","onChange","Posts","map","item","App_Post","key","Post","imgId","reader","FileReader","readAsDataURL","onload","e","img","target","result","Boolean","window","location","hostname","match","ReactDOM","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9031435d.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport { BrowserRouter, Route, Link, history, Redirect } from 'react-router-dom'\n\n\n// parent component\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    //for saving data\n    this.state = {\n      itemList: [\n        // {\n        //   id:\"\"\n        //   title: \"\",\n        //   content: \"\",\n        //   picture:\"\"\n        // }\n      ]\n    }\n    //binding method with this\n    this.addPost = this.addPost.bind(this)\n    this.removePost = this.removePost.bind(this)\n  }\n\n  addPost(title, content, picture) {\n\n    let id;\n    id = Date.now()\n\n    const newList = this.state.itemList.concat({\n      id: id,\n      title: title,\n      content: content,\n      picture: picture\n    })\n    this.setState({\n      itemList: newList\n    })\n  }\n\n  removePost() {\n    const postLength = this.state.itemList.length\n    const newList = this.state.itemList.splice(0, postLength - 1)\n    this.setState({\n      itemList: newList\n    })\n  }\n\n  render() {\n  \n    return (\n      <div className=\"App\">\n        <BrowserRouter>\n          <Route exact path=\"/\" render={(props) => <IndexPage {...props} removePost={this.removePost} itemList={this.state.itemList} />} />\n          <Route path=\"/add_post\" render={(props) => <NewPost {...props} addPost={this.addPost} />} />\n        </BrowserRouter>\n      </div>\n    )\n  }\n}\n\n//for index page, child of App\nclass IndexPage extends React.Component {\n  constructor(props) {\n    super(props);\n    this.toPostPage = this.toPostPage.bind(this);\n    this.toRemovePost = this.toRemovePost.bind(this);\n  }\n\n  toPostPage() {\n    this.props.history.push('/add_post')\n  }\n\n  toRemovePost() {\n    this.props.removePost()\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <button onClick={this.toPostPage}>Add Post</button>\n        <button onClick={this.toRemovePost}>Remove Post</button>\n        <Posts itemList={this.props.itemList} />\n      </div>\n    )\n  }\n}\n\n\n\n//for add_post page, child of App\nclass NewPost extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.submitPost = this.submitPost.bind(this);\n    this.uploadPic = this.uploadPic.bind(this)\n    this.uploadClick = this.uploadClick.bind(this)\n\n  }\n\n  uploadClick(){\n    const newPic = document.getElementById('pictureBox')\n    newPic.click()\n  }\n\n  uploadPic() {\n    //section below is for preview\n    const newPic = document.getElementById('pictureBox').files[0]\n    const previewImg = document.getElementById('previewImg')\n    const previewP = document.getElementById('previewP')\n    previewImg.src = URL.createObjectURL(newPic)\n    previewImg.hidden = false;\n    previewP.hidden = false;\n  }\n\n\n  submitPost() {\n\n    //save post && call parent function to truly save post's information\n    const title = document.getElementById('titleBox').value\n    const content = document.getElementById('contentBox').value\n    const picture = document.getElementById('pictureBox').files[0]\n\n    this.props.addPost(title, content, picture);\n    this.props.history.push('/')\n  }\n\n  render() {\n    return (\n      <div>\n        <p>Title:</p>\n        <input className='textBox' type=\"text\" id=\"titleBox\" maxLength={10} />\n        <p>Content:</p>\n        <textarea className='textareaBox' id=\"contentBox\" defaultValue=\"Please input Content.\" />\n        <br />\n        <p id='previewP' hidden={true}>Preview:</p>\n        <img id='previewImg' className='img' hidden={true} />\n        <br />\n        <input id='pictureBox' type=\"file\" accept=\"image/*\" onChange={this.uploadPic} hidden={true}/>\n        <button id='pictureBtn' onClick={this.uploadClick}>upload</button>\n        <button id=\"submitPost\" onClick={this.submitPost} >submit</button>\n        <br/>\n      </div>\n    )\n  }\n}\n\n\n\n\n//for showing all posts, map and render every post component, child of index\nclass Posts extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    const itemList = this.props.itemList.map((item) => <Post key={item.id} id={item.id} title={item.title} content={item.content}\n      picture={item.picture} />)\n\n    return (\n      <div>\n        {itemList}\n      </div>\n    )\n  }\n\n}\n\n// for single post show, child of Posts\nclass Post extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  componentDidMount() {\n\n    if (this.props.picture) {\n      const imgId = this.props.id\n      const reader = new FileReader()\n      reader.readAsDataURL(this.props.picture)\n      reader.onload = function (e) {\n        const img = document.getElementById(imgId) \n        img.src= e.target.result\n        img.hidden=false\n      }\n    }\n  }\n\n  render() {\n    return (\n      <div className='post'>\n        <p>{this.props.title}</p>\n        <p>{this.props.content}</p>\n        <img id={this.props.id} className='img' hidden={true} />\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}