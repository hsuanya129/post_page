{"version":3,"sources":["components/Post.js","components/Posts.js","components/IndexPage.js","components/NewPost.js","App.js","serviceWorker.js","index.js"],"names":["Post","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","showImage","picture","img","current","reader","FileReader","readAsDataURL","onload","e","src","target","result","hidden","React","createRef","react_default","a","createElement","className","title","content","ref","Component","Posts","itemList","map","item","components_Post","key","id","IndexPage","toPostPage","history","push","toRemovePost","removePost","onClick","components_Posts","NewPost","uploadClick","click","uploadPic","newPic","files","previewImg","URL","createObjectURL","previewP","submitPost","addPost","value","type","maxLength","defaultValue","accept","onChange","App","Date","now","newList","state","concat","setState","postLength","length","splice","_this2","react_router_dom","basename","react_router","exact","path","render","components_IndexPage","assign","components_NewPost","Boolean","window","location","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.863943b8.chunk.js","sourcesContent":["import React from 'react';\r\nimport './../App.css';\r\n\r\n// for single post show, child of Posts\r\nclass Post extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.picture = React.createRef();\r\n    }\r\n\r\n    //if the post contains a picture, show it\r\n    showImage = () => {\r\n        \r\n        if (this.props.picture) {\r\n            const img = this.picture.current //在這裡先行宣告放入const中是由於下方的匿名函式無法用this取得\r\n            const reader = new FileReader()\r\n            reader.readAsDataURL(this.props.picture)\r\n            reader.onload = function (e) {\r\n                img.src = e.target.result\r\n                img.hidden = false\r\n            }\r\n        }\r\n    }\r\n\r\n    //DOM couldn't be reached until component has been mounted\r\n    componentDidMount() {\r\n        this.showImage();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className='post'>\r\n                <p>{this.props.title}</p>\r\n                <p>{this.props.content}</p>\r\n                <img ref={this.picture} className='img' hidden={true} />\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default Post","import React from 'react';\r\nimport './../App.css';\r\nimport Post from './Post'\r\n\r\n//for showing all posts, map and render every post component, child of index\r\nclass Posts extends React.Component {\r\n    constructor(props) {\r\n      super(props);\r\n    }\r\n  \r\n    render() {\r\n      const itemList = this.props.itemList.map((item) => <Post key={item.id} id={item.id} title={item.title} content={item.content}\r\n        picture={item.picture} />)\r\n  \r\n      return (\r\n        <div>\r\n          {itemList}\r\n        </div>\r\n      )\r\n    }\r\n  \r\n  }\r\n\r\nexport default Posts","import React from 'react';\r\nimport './../App.css';\r\nimport Posts from './Posts'\r\n\r\n//for index page, child of App\r\nclass IndexPage extends React.Component {\r\n    constructor(props) {\r\n      super(props);\r\n    }\r\n  \r\n    toPostPage =()=> {\r\n      this.props.history.push('/add_post')\r\n    }\r\n  \r\n    toRemovePost=()=> {\r\n      this.props.removePost()\r\n    }\r\n  \r\n    render() {\r\n      return (\r\n        <div className=\"App\">\r\n          <button onClick={this.toPostPage}>Add Post</button>\r\n          <button onClick={this.toRemovePost}>Remove Post</button>\r\n          <Posts itemList={this.props.itemList} />\r\n        </div>\r\n      )\r\n    }\r\n  }\r\nexport default IndexPage","import React from 'react';\r\nimport './../App.css';\r\n\r\n\r\n//for add_post page, child of App\r\nclass NewPost extends React.Component {\r\n    constructor(props) {\r\n      super(props);\r\n      //preview Image DOM refs section\r\n      this.previewImg = React.createRef();\r\n      this.previewP = React.createRef();\r\n\r\n      //post content DOM refs section\r\n      this.title = React.createRef();\r\n      this.content = React.createRef();\r\n      this.picture = React.createRef();\r\n    }\r\n  \r\n    //when the upload 'button' hit, call the hidden 'input file' to do his job\r\n    uploadClick = () => {\r\n      this.picture.current.click();\r\n    }\r\n\r\n    //section below is for image previewing\r\n    uploadPic = () => {\r\n      const newPic = this.picture.current.files[0]\r\n      this.previewImg.current.src = URL.createObjectURL(newPic);\r\n      this.previewImg.current.hidden = false;\r\n      this.previewP.current.hidden = false;\r\n    }\r\n  \r\n    //fetch DOM data then call parent function to truly save post's information\r\n    submitPost = () => {\r\n      this.props.addPost(this.title.current.value, this.content.current.value, this.picture.current.files[0]);\r\n      this.props.history.push('/');\r\n    }\r\n  \r\n    render() {\r\n      return (\r\n        <div>\r\n          <p>Title:</p>\r\n          <input ref={this.title} className='textBox' type=\"text\"  maxLength={10} />\r\n          <p>Content:</p>\r\n          <textarea ref={this.content} className='textareaBox' defaultValue=\"Please input Content.\" />\r\n          <br />\r\n          <p ref={this.previewP} hidden={true}>Preview:</p>\r\n          <img ref={this.previewImg} className='img' hidden={true} />\r\n          <br />\r\n          <input ref={this.picture} type=\"file\" accept=\"image/*\" onChange={this.uploadPic} hidden={true}/>\r\n          <button onClick={this.uploadClick}>upload</button>\r\n          <button onClick={this.submitPost} >submit</button>\r\n          <br />\r\n        </div>\r\n      )\r\n    }\r\n  }\r\n\r\nexport default NewPost","import React from 'react';\r\nimport './App.css';\r\nimport { BrowserRouter, Route, Link, history, Redirect } from 'react-router-dom';\r\nimport IndexPage from './components/IndexPage';\r\nimport NewPost from './components/NewPost';\r\n\r\n\r\n\r\n\r\n// parent, root component, where the truth data saves\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    //for saving data\r\n    this.state = {\r\n      itemList: [\r\n        // {\r\n        //   id:\"\"\r\n        //   title: \"\",\r\n        //   content: \"\",\r\n        //   picture:\"\"\r\n        // }\r\n      ]\r\n    }\r\n  }\r\n\r\n  addPost = (title, content, picture) => {\r\n\r\n    let id;\r\n    id = Date.now()\r\n\r\n    const newList = this.state.itemList.concat({\r\n      id: id,\r\n      title: title,\r\n      content: content,\r\n      picture: picture\r\n    })\r\n\r\n    this.setState({\r\n      itemList: newList\r\n    })\r\n  }\r\n\r\n  removePost = () => {\r\n    const postLength = this.state.itemList.length\r\n    const newList = this.state.itemList.splice(0, postLength - 1)\r\n    this.setState({\r\n      itemList: newList\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <BrowserRouter basename='/post_page/'>\r\n          <Route exact path=\"/\" render={(props) => <IndexPage {...props} removePost={this.removePost} itemList={this.state.itemList} />} />\r\n          <Route path=\"/add_post\" render={(props) => <NewPost {...props} addPost={this.addPost} />} />\r\n        </BrowserRouter>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}